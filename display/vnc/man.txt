Display on vnc client over a network
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. manpage:: 7 display-vnc

Synopsis
--------

::

  display-vnc: [-client=<host>] [-copyrect=no|always] [-display=<dpy>]
	       [-hextile=no] [-kold] [-passwd=<password>]
	       [-physz=<sizex>,<sizey>[dpi]] [-server[=<dpy>|stdio]]
	       [-stdio] [-tight=no] [-title=<title>] [-viewonly]
	       [-viewpw=<password>] [-zlib=<level>|no] [-zlibhex=<level>|no]
	       [-zrle=<level>|no]


Description
-----------

Provides a linear framebuffer in main memory. A vnc client that
connects gets to see a copy of this framebuffer. The protocol
used is the remote framebuffer protocol, or the RFB protocol for
short.

The supported RFB protocol versions are 3.3, 3.7 and 3.8.


Options
-------

``-client=<host>``
    Make a connection to :p:`host`, instead of waiting for clients to
    connect. A vnc viewer in listening mode is expected to be found on
    :p:`host`.

``-copyrect=no|always``
    Controls when the CopyRect encoding is used. Select :p:`no` to disable
    it completely, and :p:`always` to enable it when suitable even if there
    is support for some other encoding the client has preferred. The default
    is to only use the CopyRect encoding if it is the most preferred
    encoding available.

``-display=<dpy>``
    The display number clients should connect to. Display number 0 is
    equivalent to tcp port 5900.

    If the :p:`-client` option is also given, this is instead the display
    number this server connects to, and display number 0 is equivalent
    to tcp port 5500 in that case.

``-hextile=no``
    Disables the hextile encoding.

``-kold``
    Kill On Last Disconnect. This option ends the application when the last
    client disconnects. It can be useful in conjunction with the :p:`-client`,
    :p:`-stdio` and :p:`-server=stdio` options so that the application does
    not linger without any user feedback.

``-passwd=<password>``
    The vnc client has to successfully encrypt a random challenge
    with the stated :p:`password` in order to connect. In the
    :p:`password`, only the eight first characters and the seven least
    significant bits of every character are used in the authentication.
    If this :p:`password` is given, the client is allowed to send input
    events such as keys and pointer movements to the application. However,
    this allowance may be overridden with the :p:`-viewonly` option. See
    the options :p:`-viewonly` and :p:`-viewpw` for comparison.

``-physz=<sizex>,<sizey>[dpi]``
    This option will provide a physical screen size for applications
    which wish to remain resolution independent. :p:`sizex`,:p:`sizey`
    are the x,y size of the screen in millimeters, unless the optional
    ``dpi`` string is affixed, in which case, they represent resolution
    in dots-per-inch.

``-server[=<dpy>|stdio]``
    To run both a server and open a client at the same time, but with
    different displays numbers, the server display number can be specified
    using :p:`-server=<dpy>`. If no argument is given, the display number
    is collected for the :p:`-display` option. Use :p:`-display=stdio` to
    accept connections from the stdin file handle, which is suitable for
    serving a GGI application as an inetd(8) :p:`wait` type service.
    The :p:`-server=stdio` option is incompatible with the :p:`-stdio`
    option.

``-stdio``
    Talk the RFB protocol on stdin/stdout instead of waiting for clients
    to connect. Suitable for serving a GGI application as an inetd(8)
    :p:`nowait` type service. One requirement though, is that the served
    GGI application does not "chatter" on stdout and/or stderr.
    The :p:`-stdio` option is incompatible with the :p:`-server=stdio`
    option.

``-tight=no``
    Disables the Tight encoding.

``-title=<title>``
    The :p:`title` clients should use on their windows. If this option
    is not specified, the default is "GGI on vnc".

``-viewonly``
    If this option is given, no client is allowed to send input events
    such as keys and pointer movements to the application. If the
    :p:`-passwd` option has also been given, the given :p:`password` is
    effectively reduced to a :p:`-viewpw` :p:`password`. This option is
    intended for use together with e.g. the :man:`display-multi(7)`
    target.

``-viewpw=<password>``
    The vnc client has to successfully encrypt a random challenge
    with the stated :p:`password` in order to connect. In the
    :p:`password`, only the eight first characters and the seven least
    significant bits of every character are used in the authentication.
    If this :p:`password` is given, the client is *not* allowed to send
    input events such as keys and pointer movements to the application.
    See the options :p:`-passwd` and :p:`-viewonly` for comparison.

``-zlib=<level>|no``
    Specify the compression level to use for the Zlib encoding. 0 for
    no compression and 9 for maximum compression. Saying :p:`no` here
    disables the Zlib encoding. If the option isn't specified, a default
    compromize between speed and compression is selected.

``-zlibhex=<level>|no``
    Specify the compression level to use for the ZlibHex encoding. 0 for
    no compression and 9 for maximum compression. Saying :p:`no` here
    disables the ZlibHex encoding. If the option isn't specified, a default
    compromize between speed and compression is selected.

``-zrle=<level>|no``
    Specify the compression level to use for the ZRLE encoding. 0 for
    no compression and 9 for maximum compression. Saying :p:`no` here
    disables the ZRLE encoding. If the option isn't specified, a default
    compromize between speed and compression is selected.


Features
--------

- Raw, CopyRect, Hextile, Tight, Zlib, ZlibHex and ZRLE encodings. The
  CopyRect encoding is only used for panning.
- Multiple simultaneous clients.
- DirectBuffer always available, including tidy buffer mode (see
  :man:`ggiSetFlags(3)`).
- Multiple frames always available.
- Panning always available.
- Unaccelerated.


Examples
--------

To launch a GGI application for each connection made to a TCP port, you
may use inetd. Just add a line like this to ``/etc/inetd.conf``::

  vnc stream tcp nowait nobody /path/to/app app -t vnc:-stdio:-kold

You also need to define what port the service ``vnc`` should use in the
file ``/etc/services``::

  vnc            5900/tcp

After you make inetd reread its configuration (e.g. send the -HUP signal
to it), you should be able to run the application with a VNC viewer
of your choise.

If you instead want to have all subsequent connections share one
application instance, change the line in ``/etc/inetd.conf`` to::

  vnc stream tcp wait nobody /path/to/app app -t vnc:-server=stdio:-kold

.. note::

  This assumes that the application supports the ``-t`` option to set the
  display target, and that it does not output anything at all on
  stdout/stderr. The application will run as the user ``nobody``.


Credits
-------

The Tight encoding uses the jpeg library from the Independent JPEG Group.


Bugs
----

- If the application does not give control to libgii with regular
  intervals (i.e. :man:`giiEventRead(3)`, :man:`giiEventPoll(3)`
  or some wrapper that in turn calls one of these functions) this
  display target will not work, or at least not work well.
- Special keys (i.e. shift, escape, etc) needs to be converted.
