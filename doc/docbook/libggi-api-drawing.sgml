<refentry id="api-ggisetgcforeground">

<refmeta>
<refentrytitle><function/ggiSetGCForeground/</refentrytitle>
<manvolnum/3ggi/
<refmiscinfo/GGI/
</refmeta>

<refnamediv>
<refname/ggiSetGCForeground/
<refname/ggiGetGCForeground/
<refname/ggiSetGCBackground/
<refname/ggiGetGCBackground/
<refpurpose>Set or get the foreground and background colors used in drawing
operations in a visual</refpurpose>
</refnamediv>

<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisInfo>#include &lt;ggi/ggi.h&gt;</funcsynopsisInfo>
<funcprototype>
<funcdef>int <function/ggiSetGCForeground/</funcdef>
<paramdef>ggi_visual_t <parameter/vis/, ggi_pixel <parameter/color/</paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function/ggiGetGCForeground/</funcdef>
<paramdef>ggi_visual_t <parameter/vis/, ggi_pixel *<parameter/color/</paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function/ggiSetGCBackground/</funcdef>
<paramdef>ggi_visual_t <parameter/vis/, ggi_pixel <parameter/color/</paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function/ggiGetGCBackground/</funcdef>
<paramdef>ggi_visual_t <parameter/vis/, ggi_pixel *<parameter/color/</paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>

<para>
<function/ggiSetGCForeground/ and <function/ggiGetGCForeground/ set or reads
the current colors for the foreground, used in all normal drawing
functions.
</para>
<para>
<function/ggiSetGCBackground/ and <function/ggiGetGCBackground/ set or reads
the current colors for the background, used in two-color operations like
drawing text.
</para>
</refsect1>

<refsect1>
<title>Return value</title>

<para>All four functions <ReturnValue/0/ for OK.  </para>

</refsect1>
</refentry>

<refentry id="api-ggisetgcclipping">

<refmeta>
<refentrytitle><function/ggiSetGCClipping/</refentrytitle>
<manvolnum/3ggi/
<refmiscinfo/GGI/
</refmeta>

<refnamediv>
<refname/ggiSetGCClipping/
<refname/ggiGetGCClipping/
<refpurpose>Set or get the clipping rectangle for a visual
</refpurpose></refnamediv>

<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisInfo>#include &lt;ggi/ggi.h&gt;</funcsynopsisInfo>
<funcprototype>
<funcdef>int <function/ggiSetGCClipping/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/, 
int <parameter/left/, int <parameter/top/, 
int <parameter/right/, int <parameter/bottom/
</paramdef>
</funcprototype>

<funcprototype>
<funcdef>int <function/ggiGetGCClipping/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/, 
int *<parameter/left/, int *<parameter/top/, 
int *<parameter/right/, int *<parameter/bottom/
</paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>

<para>
<function/ggiSetGCClipping/ sets the the current clipping rectangle to
(<parameter/left/,<parameter/top/)-(<parameter/right/-1,<parameter/bottom/-1),
inclusive.
</para>
<para>Initially the clipping rectangle is the whole virtual screen.
</para>
<para>All LibGGI drawing primitives obey the clipping rectangle.
Negative coordinates given to LibGGI drawing functions will be 
clipped correctly.
</para>

<para>
<function/ggiGetGCClipping/ reads the coordinates of the current clipping
rectangle.
</para>
</refsect1>

<refsect1>
<title>Return value</title>

<para>Both functions <returnvalue/0/ for OK.
</para>

</refsect1>
</refentry>

<refentry ID="api-ggidrawpixel">

<refmeta>
<refentrytitle><function/ggiDrawPixel/</refentrytitle>
<manvolnum/3ggi/
<refmiscinfo/GGI/
</refmeta>

<refnamediv>
<refname/ggiDrawPixel/
<refname/ggiPutPixel/
<refname/ggiGetPixel/
<refpurpose>Draw, put, and get a single pixel from a visual</refpurpose>
</refnamediv>

<refsynopsisdiv><funcsynopsis>
<funcsynopsisInfo>#include &lt;ggi/ggi.h&gt;</funcsynopsisInfo>
<funcprototype>
<funcdef>int <function/ggiDrawPixel/</funcdef>
<paramdef>ggi_visual_t <parameter/vis/, 
int <parameter/x/, 
int <parameter/y/
</paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function/ggiPutPixel/</funcdef>
<paramdef>ggi_visual_t <parameter/vis/, 
int <parameter/x/, 
int <parameter/y/, 
ggi_pixel <parameter/col/
</paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function/ggiGetPixel/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/, 
int <parameter/x/, 
int <parameter/y/, 
ggi_pixel *<parameter/col/
</paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>

<para>
Draw, put, or get a single pixelvalue at (<parameter/x/,<parameter/y/).
</para>
</refsect1>

<refsect1>
<title>Return value</title>

<para>All three functions return <returnvalue/0/ to indicate success.
</para>

</refsect1>
</refentry>


<refentry ID="api-ggidrawhline">

<refmeta>
<refentrytitle><function/ggiDrawHLine/</refentrytitle>
<manvolnum/3ggi/
<refmiscinfo/GGI/
</refmeta>

<refnamediv>
<refname/ggiDrawHLine/
<refname/ggiPutHLine/
<refname/ggiGetHLine/
<refpurpose>Draw, put, and get a horizontal line from a visual</refpurpose>
</refnamediv>

<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisInfo>#include &lt;ggi/ggi.h&gt;</funcsynopsisInfo>

<funcprototype>
<funcdef>int <function/ggiDrawHLine/</funcdef>
<paramdef>ggi_visual_t <parameter/vis/, int <parameter/x/, int <parameter/y/, int <parameter/w/</paramdef>
</funcprototype>

<funcprototype>
<funcdef>int <function/ggiPutHLine/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/, int <parameter/x/, int <parameter/y/, int <parameter/w/, void *<parameter/buf/
</paramdef>
</funcprototype>

<funcprototype>
<funcdef>int <function/ggiGetHLine/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/, int <parameter/x/, int <parameter/y/, int <parameter/w/, void *<parameter/buf/
</paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>

<para>
Draw, put, or get a horizontal line from (<parameter/x/,<parameter/y/), extending
<parameter/w/ pixels in the positive x direction (normally right).  The height
is one pixel.
 </para>
</refsect1>

<refsect1>
<title>Return value</title>

<para>All three functions return <returnvalue/0/ to indicate success. 
</para>
</refsect1>

<refsect1>
<title>See Also</title>

<simplelist TYPE=inline>
<member><xref linkEnd="api-ggidrawvline"></member>
<member><xref linkEnd="api-ggidrawbox"></member>
<member><xref linkEnd="api-ggidrawline"></member>
</simplelist>

</refsect1>
</refentry>


<refentry ID="api-ggidrawvline">

<refmeta>
<refentrytitle><function/ggiDrawVLine/</refentrytitle>
<manvolnum/3ggi/
<refmiscinfo/GGI/
</refmeta>

<refnamediv>
<refname/ggiDrawVLine/
<refname/ggiPutVLine/
<refname/ggiGetVLine/
<refpurpose>Draw, put, and get a vertical line from a visual</refpurpose>
</refnamediv>

<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisInfo>#include &lt;ggi/ggi.h&gt;</funcsynopsisInfo>

<funcprototype>
<funcdef>int <function/ggiDrawVLine/</funcdef>
<paramdef>ggi_visual_t <parameter/vis/, int <parameter/x/, int <parameter/y/, int <parameter/h/</paramdef>
</funcprototype>

<funcprototype>
<funcdef>int <function/ggiPutVLine/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/, int <parameter/x/, int <parameter/y/, int <parameter/h/, void *<parameter/buf/
</paramdef>
</funcprototype>

<funcprototype>
<funcdef>int <function/ggiGetVLine/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/, int <parameter/x/, int <parameter/y/, int <parameter/h/, void *<parameter/buf/
</paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>

<para>
Draw, put, or get a vertical line from (<parameter/x/,<parameter/y/), extending
<parameter/h/ pixels in the positive y direction (normally down).
The width of the line is one pixel.
 </para>
</refsect1>

<refsect1>
<title>Return value</title>

<para>All three functions return <ReturnValue/0/ to indicate success. 
</para>
</refsect1>

<refsect1>
<title>See Also</title>
<simplelist TYPE=inline>
<member><xref linkend="api-ggidrawhline"></member>
<member><xref linkend="api-ggidrawbox"></member>
<member><xref linkend="api-ggidrawline"></member>
</simplelist>
</refsect1>
</refentry>


<refentry ID="api-ggidrawbox">

<refmeta>
<refentrytitle><function/ggiDrawBox/</refentrytitle>
<manvolnum/3ggi/
<refmiscinfo/GGI/
</refmeta>

<refnamediv>
<refname/ggiDrawBox/
<refname/ggiPutBox/
<refname/ggiGetBox/
<refpurpose>Draw, put, and get a rectangle from a visual</refpurpose>
</refnamediv>

<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisInfo>#include &lt;ggi/ggi.h&gt;</funcsynopsisInfo>

<funcprototype>
<funcdef>int <function/ggiDrawBox/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/, int <parameter/x/, int <parameter/y/, int <parameter/w/, int <parameter/h/
</paramdef>
</funcprototype>

<funcprototype>
<funcdef>int <function/ggiPutBox/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/, 
int <parameter/x/, int <parameter/y/, int <parameter/w/, int <parameter/h/,
void *<parameter/buf/
</paramdef>
</funcprototype>

<funcprototype>
<funcdef>int <function/ggiGetBox/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/, 
int <parameter/x/, int <parameter/y/, int <parameter/w/, int <parameter/h/, 
void *<parameter/buf/
</paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>

<para>
Draw, put, or get a rectangle at (<parameter/x/,<parameter/y/), extending
<parameter/w/ pixels in the positive x direction and <parameter/h/ pixels in the
positive y direction.
</para>
</refsect1>

<refsect1>
<title>Return value</title>

<para>All three functions return <ReturnValue/0/ to indicate success. 
</para>
</refsect1>

<refsect1>
<title>See Also</title>
<simplelist TYPE=inline>
<member><xref linkend="api-ggidrawhline"></member>
<member><xref linkend="api-ggidrawvline"></member>
<member><xref linkend="api-ggidrawline"></member>
</simplelist>

</refsect1>
</refentry>


<refentry ID="api-ggifillscreen">

<refmeta>
<refentrytitle><function/ggiFillscreen/</refentrytitle>
<manvolnum/3ggi/
<refmiscinfo/GGI/
</refmeta>

<refnamediv>
<refname/ggiFillscreen/
<refpurpose>Fills the entire virtual screen</refpurpose>
</refnamediv>

<refsynopsisdiv><funcsynopsis>
<funcsynopsisInfo>#include &lt;ggi/ggi.h&gt;</funcsynopsisInfo>
<funcprototype>
<funcdef>int <function/ggiFillscreen/</funcdef>
<paramdef>ggi_visual_t <parameter/vis/</paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>

<para>
Fills the current clipping rectangle (usually the entire virtual screen)
with the current foreground color.  It may be
more efficient than the corresponding call to <function/ggiDrawBox/.
</para>

</refsect1>

<refsect1>
<title>Return value</title>

<para>This function returns <returnvalue/0/ to indicate success. 
</para>

</refsect1>
</refentry>


<refentry ID="api-ggidrawline">

<refmeta>
<refentrytitle><function/ggiDrawLine/</refentrytitle>
<manvolnum/3ggi/
<refmiscinfo/GGI/
</refmeta>

<refnamediv>
<refname/ggiDrawLine/
<refpurpose>Draw a line on a visual</refpurpose>
</refnamediv>

<refsynopsisdiv><funcsynopsis>
<funcsynopsisInfo>#include &lt;ggi/ggi.h&gt;</funcsynopsisInfo>

<funcprototype>
<funcdef>int <function/ggiDrawLine/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/, int <parameter/x/, int <parameter/y/, int <parameter/xe/, int <parameter/ye/
</paramdef>
</funcprototype>
</funcsynopsis></refsynopsisdiv>

<refsect1>
<title>Description</title>

<para>
Draws any line, using the current foreground color, from
(<parameter/x/,<parameter/y/) to (<parameter/xe/,<parameter/ye/). The line is exact; the
pixel set is no more than 0.5 pixels off the place it should be.
</para>
</refsect1>

<refsect1>
<title>Return value</title>

<para>This function returns <ReturnValue/0/ to indicate success. 
</para>
</refsect1>

<refsect1>
<title>See Also</title>

<simplelist TYPE=inline>
<member><xref linkend="api-ggidrawhline"></member>
<member><xref linkend="api-ggidrawvline"></member>
</simplelist>

</refsect1>
</refentry>
