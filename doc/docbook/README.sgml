<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V3.1//EN">

<article>

<artheader>
<title>How to use the DocBook documentation for GGI</title>

<authorgroup>
<editor>
<firstname>Steve</firstname>
<surname>Cheng</surname>
<affiliation>
<address><email>steve@ggi-project.org</email></address>
</affiliation>
<contrib>Maintainer of GGI documentation</contrib>
</editor>

<collab>
<collabname>GGI Project</collabname>
</collab>
</authorgroup>

<releaseinfo>
$Id: README.sgml,v 1.1 2001/05/12 23:02:56 cegger Exp $
</releaseinfo>
</artheader>

<para>
This documentation is written in DocBook.  The SGML source can be used
to generate man pages, Texinfo, TeX, HTML and text formats automatically.
</para>

<para>
Your operating system or distribution may already include the tools that
are needed to process DocBook.  For those who are not experts in SGML
systems, I recommend using them instead of installing the tools
yourself.  (DocBook is not one single integrated package.)
</para>

<para>
This document suggests a number of alternatives for using DocBook.
Questions and comments on this and GGI documentation are of course
welcome.
</para>

<para>
I have already automatically generated manpages in the
<filename>../man</filename> directory.  
Other formats can be found at <ulink url="ftp://ftp.ggi-project.org/pub/ggi/doc/">
ftp.ggi-project.org:/pub/ggi/doc</ulink>.
They should all be auto-generated soon.
</para>


<simplesect id="dtd">
<title>Getting the DTD (document type definition)</title>

<para>
For anything more complicated than editing the SGML source with a text
editor, you need to install the <ulink
url="http://www.oasis-open.org/docbook/">DocBook DTD</ulink>.
</para>

</simplesect>


<simplesect id="man">
<title>To generate man pages</title>

<para>
Use <application/docbook2man-spec.pl/ from 
<ulink url="http://docbook2x.sourceforge.net/">docbook2X</ulink>.
</para>

</simplesect>

<simplesect id="texinfo">
<title>To generate Texinfo</title>

<para>
<link linkend="xml-convert">Convert to XML</link>, then use 
<application/docbook2texi-xslt/ from 
<ulink url="http://docbook2x.sourceforge.net/">docbook2X</ulink>.
</para>

</simplesect>

<simplesect id="html">
<title>To generate HTML</title>

<itemizedlist>

<listitem>

<para>
Use <ulink url="http://www.jclark.com/jade/"><application/Jade/
</ulink> with the <ulink url="http://nwalsh.com/docbook/dsssl/">
<application/DocBook Modular Stylesheets/</ulink>.
</para>

<informalexample>
<para>
Assuming that <application/Jade/ and the <application/DocBook Modular Stylesheets/
are properly installed, the following command:

<screen>
<prompt/$ /<userinput>jade -t sgml -d ggi.dsl ggi.sgml</userinput>
</screen>

will produce HTML files in the current directory.  Switch to a different
directory before running <command>jade</command> if necessary.
</para>

</informalexample>

</listitem>

<listitem>
<para>
Or, <link linkend="xml-convert">convert to XML</link>, then use
a XSL processor such as <ulink url="http://www.jclark.com/xml/xt.html">
<application/XT/</ulink>
or <ulink url="http://users.iclway.co.uk/mhkay/saxon/index.html">
<application/SAXON/</ulink>
with the <ulink url="http://www.nwalsh.com/docbook/xsl/index.html">
<application/XSL DocBook stylesheets/</ulink>.
</para>

<para>
The <application/XSL DocBook stylesheets/ are not yet
mature, so using the Jade method is recommended.
</para>
</listitem>

<listitem>
<para>
Or, <link linkend="texinfo">Convert to Texinfo</link>, then use
<command>texi2html</command>.
</para>

<para>
This method theoretically produces the worst output (since information
is lost through the Texinfo conversion), but some people may find
using Texinfo easier.
</para>

</listitem>

</itemizedlist>

</simplesect>


<simplesect id="tex">
<title>TeX</title>

<itemizedlist>

<listitem>
<para>
Use <ulink url="http://www.jclark.com/jade/"><application/Jade/
</ulink> with the <ulink url="http://nwalsh.com/docbook/dsssl/">
<application/DocBook Modular Stylesheets/</ulink>.
You also need <ulink url="http://www.tug.org/applications/jadetex/">
<application/JadeTeX/</ulink>. 
</para>

<para>
GGI documentation currently does not include print stylesheet
customizations, so the commands to produce the final result would be:

<informalexample>
<screen>
<prompt/$ /<userinput>jade -t tex -d /usr/share/sgml/stylesheet/dsssl/docbook/nwalsh/print/docbook.dsl ggi.sgml</userinput>
<prompt/$ /<userinput>jadetex ggi.tex</userinput>
</screen>
</informalexample>

</para>
</listitem>


<listitem>
<para>
Or, <link linkend="texinfo">Convert to Texinfo</link>, then use
<command>texi2dvi</command>.
</para>
</listitem>

</itemizedlist>

</simplesect>


<simplesect id="text">
<title>Text</title>

<itemizedlist>

<listitem>
<para>
<link linkend="html">Convert to HTML</link> first, then use
<command>lynx -dump</command>, <command>html2txt</command>, etc.
</para>
</listitem>

<listitem>
<para>
Or, <link linkend="texinfo">convert to Texinfo</link> and use
<command>makeinfo --no-headers</command>.
</para>
</listitem>

</itemizedlist>

</simplesect>

<simplesect id="changing">
<title>Changing the documentation</title>

<para>
First, if you don't know DocBook, you can email the documentation
maintainer any changes in ASCII amd he will gladly format and merge.
</para>

<para>
For the benefit of developers who do not have time to thoroughly
understand how to use DocBook, the meaning of the DocBook elements 
used in GGI documentation is summarized below:

<variablelist>

<varlistentry>
<term><sgmltag class=element/book/</term>
<term><sgmltag class=element/chapter/</term>
<term><sgmltag class=element/article/</term>
<term><sgmltag class=element/sect1/</term>
<term><sgmltag class=element/sect2/</term>
<term><sgmltag class=element/sect3/</term>
<listitem>
<para>Contain sections</para>
</listitem>
</varlistentry>


<varlistentry>
<term><sgmltag class=element/para/</term>
<listitem>
<para>Your standard paragraph :)</para>
</listitem>
</varlistentry>


<varlistentry>
<term><sgmltag class=element/refentry/</term>
<listitem>
<para>Section that resembles a man page</para>
</listitem>
</varlistentry>

<varlistentry>
<term><sgmltag class=element/example/</term>
<term><sgmltag class=element/informalexample/</term>
<listitem>
<para>
Denotes examples.  <sgmltag class=element/example/ needs a title
while <sgmltag class=element/informalexample/ does not.
</para>
</listitem>
</varlistentry>


<varlistentry>
<term><sgmltag class=element/synopsis/</term>
<term><sgmltag class=element/programlisting/</term>
<term><sgmltag class=element/screen/</term>
<listitem>
<para>
&lsquo;Block&rsquo; elements in which the content is displayed verbatim
and usually in a fixed-width font.
Equivalent to HTML's <sgmltag class=element/pre/ with additional
semantics.
</para>
</listitem>
</varlistentry>


<varlistentry>
<term><sgmltag class=element/cmdsynopsis/</term>
<term><sgmltag class=element/arg/</term>
<term><sgmltag class=element/group/</term>
<term><sgmltag class=element/command/</term>
<listitem>
<para>
Use for marking up synopses of commands and command-line-like syntax.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><sgmltag class=element/funcsynopsis/</term>
<term><sgmltag class=element/funcsynopsisinfo/</term>
<term><sgmltag class=element/funcprototype/</term>
<term><sgmltag class=element/funcdef/</term>
<term><sgmltag class=element/paramdef/</term>
<listitem>
<para>
Use for marking up synopses of C or C-like functions.
Currently, the GGI documentation uses <sgmltag class=element/paramdef/
markup in a slightly incorrect way, but you need not worry about that;
when the time comes they will all be corrected by the maintainer.
</para>
</listitem>
</varlistentry>


<varlistentry>
<term><sgmltag class=element/literal/</term>
<listitem>
<para>
In GGI docs, used for values for parameters, arguments, struct fields, 
or variables, and inline computer code.
</para>
</listitem>
</varlistentry>


<varlistentry>
<term><sgmltag class=element/symbol/</term>
<listitem>
<para>In GGI docs, used for denoting C #defines.</para>
</listitem>
</varlistentry>


<varlistentry>
<term><sgmltag class=element/type/</term>
<term><sgmltag class=element/structname/</term>
<term><sgmltag class=element/structfield/</term>
<listitem>
<para>
In GGI docs, <sgmltag class=element/type/ is used for C typedefs such as
<type/ggi_visual_t/.  Although structs in GGI are also typedefs,
we just use <sgmltag class=element/structname/ for those.
</para>
</listitem>
</varlistentry>


<varlistentry>
<term><sgmltag class=element/replaceable/</term>
<listitem>
<para>Used for meta-syntactic variables (e.g. <replaceable/x/), as well as
naming the user-specified part of a command-line argument.
</para>
</listitem>
</varlistentry>


<varlistentry>
<term><sgmltag class=element/parameter/</term>
<listitem>
<para>Function call parameters.</para>
</listitem>
</varlistentry>


<varlistentry>
<term><sgmltag class=element/option/</term>
<listitem>
<para>Command-line option.</para>
</listitem>
</varlistentry>


<varlistentry>
<term><sgmltag class=element/prompt/</term>
<term><sgmltag class=element/userinput/</term>
<term><sgmltag class=element/lineannotation/</term>
<listitem>
<para>Used in <sgmltag class=element/screen/.
</para>
</listitem>
</varlistentry>


<varlistentry>
<term><sgmltag class=element/envar/</term>
<term><sgmltag class=element/returnvalue/</term>
<term><sgmltag class=element/email/</term>
<term><sgmltag class=element/filename/</term>
<term><sgmltag class=element/emphasis/</term>
<term><sgmltag class=element/computeroutput/</term>
<term><sgmltag class=element/firstterm/</term>
<listitem>
<para>Should be obvious.</para>
</listitem>
</varlistentry>


<varlistentry>
<term><sgmltag class=element/property/</term>
<listitem>
<blockquote>
<para>
The notion of a <sgmltag class=element/property/ is very
domain-dependent in computer documentation. Some object-oriented systems
speak of properties; the components from which GUIs are constructed have
properties; and one can speak of properties in very general terms;
&ldquo;the properties of a relational database.&rdquo;
</para>
</blockquote>
<para>In GGI, used of things like the set <property/width/ of a visual.</para>
</listitem>
</varlistentry>


<varlistentry>
<term><sgmltag class=element/itemizedlist/</term>
<term><sgmltag class=element/orderedlist/</term>
<term><sgmltag class=element/listitem/</term>
<listitem>
<para>Lists.</para>
</listitem>
</varlistentry>


<varlistentry>
<term><sgmltag class=element/variablelist/</term>
<term><sgmltag class=element/varlistentry/</term>
<term><sgmltag class=element/term/</term>
<term><sgmltag class=element/listitem/</term>
<listitem>
<para>Definition lists; definitions and values for certain properties, etc.</para>
</listitem>
</varlistentry>


<varlistentry>
<term><sgmltag class=element/xref/</term>
<listitem>
<para>Cross-reference.  You need to write the correct predicates
yourself such as &ldquo;see&rdquo; or &ldquo;refer to&rdquo;
(The cross-reference text generated is usually dependent on the
application, so don't abuse this for hyperlinks (a mistake which I made
myself.)</para>
</listitem>
</varlistentry>


<varlistentry>
<term><sgmltag class=element/link/</term>
<listitem>
<para>Hypertext link.</para>
</listitem>
</varlistentry>


<varlistentry>
<term><sgmltag class=element/important/</term>
<term><sgmltag class=element/note/</term>
<term><sgmltag class=element/warning/</term>
<term><sgmltag class=element/caution/</term>
<term><sgmltag class=element/tip/</term>
<listitem>
<para>Admonitions.</para>
</listitem>
</varlistentry>


<varlistentry>
<term><sgmltag class=element/comment/</term>
<listitem>
<para>Any sort of documentator's remark.
The default stylesheets always show <sgmltag class=element/comment/s
in the generated output so we know of the things that need correction.
</para>
</listitem>
</varlistentry>

</variablelist>
</para>


</simplesect>


<simplesect id="validate">
<title>Validating the documentation</title>

<para>
After changing the documentation, use <command>nsgmls -s</command>
to validate it (to ensure there are no markup errors).
<command>nsgmls</command> is included in both the <application/Jade/
distribution as well as <ulink url="http://www.jclark.com/sp/"><application/sp/
</ulink>.  This command also requires the <link linkend="dtd">DocBook DTD
</link>.
</para>

</simplesect>

<simplesect id="xml-convert">
<title>Converting to XML</title>

<para>
Unfortunately this currently requires some human intervention.  
Basically, you run <command>sx -x lower</command> on
<filename>ggi.sgml</filename>, and then manually insert
the document type declaration for the XML DocBook DTD to the result.
</para>

</simplesect>


</article>


