<chapter id="visual">

<title/Visual management/

<para>
A visual is simply a thing you can draw on. For example, a virtual console in
fullscreen mode, an X window, an invisible memory area, or a printer. It is
identified by its handle of type <type/ggi_visual_t/, which is given to all
drawing functions to indicate which visual to operate on.
</para>

<para>
Each visual is completely independent of other visuals. You can open different
visuals to display on multiple monitors and/or in multiple windows or to
work on "virtual" graphics devices like in-memory pixmaps or even PPM files
on disk.
</para>

<para>
A visual may also encompass any inputs that are associated with the
underlying graphics device.  For example, an X window visual usually
receives input from the X keyboard and pointer.
</para>

<para>
Most LibGGI functions are passed a visual returned by
<function/ggiOpen/ to know on which display they should
operate on.
</para>

<para>
<type/ggi_visual_t/ is opaque to the user. Do not try to access
any part of the structure directly. It may change without notice.
</para>


<sect1 id="graphics-terms">
<title/Other graphics terms used by LibGGI/

<variablelist>

<varlistentry id="pixel">
<term>Pixel</term>
<listitem><para>
or 'picture element' refers to a small rectangular part of an image.  It
has some attributes associated, e.g. a certain color, texture etc, which
are assumed to be constant over the whole area covered by it. All pixels
are assumed to have the same shape and size. A pixel is the smallest
element of a picture that can be controlled independently of the other
pixels in its attributes.
</para></listitem>
</varlistentry>

<varlistentry id="dot">
<term>Dot</term>
<listitem>
<para>
The smallest unit that can be addressed for an image.  For uniform
pixels this may be the pixel itself; for textured pixels, such as
character glyphs, a dot is a pixel of the texture which
is assumed to be uniform. We will use this to refer to sub-pixel
coordinates, e.g. for a graphical pointer in text mode. As with pixels,
dots are assumed to have the same shape, size, color and intensity over
the whole area covered.  They have only a uniform texture.
</para>

<para>
Most LibGGI functions and structures use <emphasis/pixels/ rather than
dots.  This makes a difference for text modes, because a character is
treated as one pixel, but consists of a <property/dpp.x/ *
<property/dpp.y/ sized matrix of dots.
</para>
</listitem>
</varlistentry>

<varlistentry id="palette">
<term>Colormap</term>
<term>Palette</term>
<term>CLUT (color lookup table)</term>

<listitem><para>
A mode where the values of the pixels represent an index into a fixed,
small table of actual colors to display.
</para></listitem>
</varlistentry>

</variablelist>

</sect1>


<sect1 id="visual-functions">
<title/Functions/


<refentry id="ggiOpen">

<refmeta>
<refentrytitle><function/ggiOpen/</refentrytitle>
<manvolnum/3ggi/
<refmiscinfo/GGI/
</refmeta>

<refnamediv>
<refname/ggiOpen/
<refname/ggiClose/
<refpurpose/Open and close a visual/
</refnamediv>

<refsynopsisdiv><funcsynopsis>
<funcsynopsisinfo>#include &lt;ggi/ggi.h&gt;</funcsynopsisinfo>

<funcprototype>
<funcdef>
ggi_visual_t <function/ggiOpen/</funcdef>
<paramdef>
const char *<parameter/display/, 
<replaceable/.../
</paramdef>
</funcprototype>

<funcprototype>
<funcdef>int <function/ggiClose/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/
</paramdef>
</funcprototype>

</funcsynopsis></refsynopsisdiv>


<refsect1>
<title/Description/

<para>
<function/ggiOpen/ opens a visual.  The visual is specified as a display
string, followed by <symbol/NULL/.  If only <symbol/NULL/ is specified,
the default display target is opened.  (This may be may be specified by
the user.)
</para>

<para>
The other arguments are for internal purposes only, such as
<parameter/argptr/, used to pass driver-specific, non-textual
information to the driver.
</para>

<para>
<function/ggiClose/ releases and destroys an open visual.
This will close X windows, return consoles to text-mode, etc.
</para>

</refsect1>

<refsect1>

<title/Return value/

<para>
<function/ggiOpen/ returns the opened visual (<type/ggi_visual_t/), or
<returnvalue/NULL/ for error.
</para>

<para>
<function/ggiClose/ returns <returnvalue/0/ for OK, otherwise an error
code.
</para>

</refsect1>

<refsect1>
<title/Examples/

<example>
<title/Open and closing default visual/
<programlisting format="linespecific">
ggi_visual_t vis = ggiOpen(NULL);

if(vis==NULL)
{
        ggiPanic("Couldn't open default visual!\n");
}

<replaceable>/* do stuff */</replaceable>

ggiClose(vis);

</programlisting>
</example>

<example>
<title/Open and closing a memory visual/

<programlisting format="linespecific">

ggi_visual_t memvis = ggiOpen("display-memory", NULL);

if(memvis==NULL) {
        return -1;
}

<replaceable>/* do stuff */</replaceable>

ggiClose(memvis);

</programlisting>
</example>

</refsect1>


<refsect1>
<title/See Also/

<simplelist>
<member><xref linkend="ggiInit"></member>

<!-- !!! link to libggi(7) -->

</simplelist>

</refsect1>


</refentry>
</sect1>
</chapter>


