<chapter id="libggi-gc">
<title>Graphics context</title>

<para>
LibGGI has a current context associated with each visual. This is done for
performance reasons, as LibGGI can set up pointers to optimized functions
when the GC changes (which can be monitored, as it may only be changed by
the functions mentioned below), or switch the hardware state efficiently.
</para>


<refentry id="ggiSetGCForeground">

<refmeta>
<refentrytitle><function/ggiSetGCForeground/</refentrytitle>
<manvolnum/3ggi/
<refmiscinfo/GGI/
</refmeta>

<refnamediv>
<refname/ggiSetGCForeground/
<refname/ggiGetGCForeground/
<refname/ggiSetGCBackground/
<refname/ggiGetGCBackground/
<refpurpose>Set or get the foreground and background colors used in drawing
operations in a visual</refpurpose>
</refnamediv>

<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisInfo>#include &lt;ggi/ggi.h&gt;</funcsynopsisInfo>
<funcprototype>
<funcdef>int <function/ggiSetGCForeground/</funcdef>
<paramdef>ggi_visual_t <parameter/vis/, ggi_pixel <parameter/color/</paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function/ggiGetGCForeground/</funcdef>
<paramdef>ggi_visual_t <parameter/vis/, ggi_pixel *<parameter/color/</paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function/ggiSetGCBackground/</funcdef>
<paramdef>ggi_visual_t <parameter/vis/, ggi_pixel <parameter/color/</paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function/ggiGetGCBackground/</funcdef>
<paramdef>ggi_visual_t <parameter/vis/, ggi_pixel *<parameter/color/</paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>

<para>
<function/ggiSetGCForeground/ and <function/ggiGetGCForeground/ set or reads
the current colors for the foreground, used in all normal drawing
functions.
</para>
<para>
<function/ggiSetGCBackground/ and <function/ggiGetGCBackground/ set or reads
the current colors for the background, used in two-color operations like
drawing text.
</para>
</refsect1>

<refsect1>
<title>Return value</title>

<para>All four functions <ReturnValue/0/ for OK.  </para>

</refsect1>
</refentry>

<refentry id="ggiSetGCClipping">

<refmeta>
<refentrytitle><function/ggiSetGCClipping/</refentrytitle>
<manvolnum/3ggi/
<refmiscinfo/GGI/
</refmeta>

<refnamediv>
<refname/ggiSetGCClipping/
<refname/ggiGetGCClipping/
<refpurpose>Set or get the clipping rectangle for a visual
</refpurpose></refnamediv>

<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisInfo>#include &lt;ggi/ggi.h&gt;</funcsynopsisInfo>
<funcprototype>
<funcdef>int <function/ggiSetGCClipping/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/, 
int <parameter/left/, int <parameter/top/, 
int <parameter/right/, int <parameter/bottom/
</paramdef>
</funcprototype>

<funcprototype>
<funcdef>int <function/ggiGetGCClipping/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/, 
int *<parameter/left/, int *<parameter/top/, 
int *<parameter/right/, int *<parameter/bottom/
</paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>

<para>
<function/ggiSetGCClipping/ sets the the current clipping rectangle to
(<parameter/left/,<parameter/top/)-(<parameter/right/-1,<parameter/bottom/-1),
inclusive.
</para>
<para>Initially the clipping rectangle is the whole virtual screen.
</para>
<para>All LibGGI drawing primitives obey the clipping rectangle.
Negative coordinates given to LibGGI drawing functions will be 
clipped correctly.
</para>

<para>
<function/ggiGetGCClipping/ reads the coordinates of the current clipping
rectangle.
</para>
</refsect1>

<refsect1>
<title>Return value</title>

<para>Both functions <returnvalue/0/ for OK.
</para>

</refsect1>
</refentry>
</chapter>

<chapter id="libggi-primitives">
<title>Primitives</title>

<para>
LibGGI has three basic operations on rectangular areas: (including the
degenerate cases of horizontal and vertical lines and single pixels):

<variablelist>

<varlistentry>
<term/Draw/
<listitem><para>
Set all contained pixels to the current foreground color (maybe modified
by the update operations as set in the current graphics context).
</para></listitem>
</varlistentry>

<varlistentry>
<term/Put/
<listitem><para>
Fill the area with pixelvalues from a buffer.
</para></listitem>
</varlistentry>

<varlistentry>
<term/Get/
<listitem><para>
Read pixels from the screen into a buffer.
</para></listitem>
</varlistentry>

</variablelist>
</para>


<para>
Get/Put buffers are the buffers used by the functions <function/ggiGet*/,
<function/ggiPut*/, <function/ggiPackColors/ and <function/ggiUnpackPixels/.
</para>

<para>
The format of the individual pixels in get/put buffers are defined by
<structname/ggi_pixelformat/ (see the ggi_pixelformat section above).
</para>

<para>
Pixels are stored linearly, e.g. a rectangle with a width of three and a
height of two will be stored with pixels (0,0) (1,0) (2,0) (0,1) (1,1),
(2,1) in that order.
</para>

<para>
Get/put buffers use chunky pixels, unpacked, even if their representation in
the framebuffer is packed (i.e. pixel size not multiple of 8 bits) or
non-linear.  Thus, the application does not need to know how to use planar or
packed pixels for non-direct acccess.

<note>
<para>
(You may specify use of packed buffers using the GT_SUB_PACKED_GETPUT
ggi_graphtype flag, but as of this writing, no targets implement that yet.)</para>
</note>
</para>
<para>
The get/put buffer passed to the LibGGI functions should be allocated
for at least 

<property/width/ * <property/height/ * 
((<function/ggiGetPixelFormat()/->size+7)/8)

bytes.
</para>
<para>
(That is, the pixel size is obtained from
<structfield/ggi_pixelformat.size/, rounded to a multiple of 8 bits (one
byte), and is multiplied by the width and the height of the buffer.)
</para>

<comment>
Note:
We need to care for strange things like 5x7 rectangles in 2bpp modes!
Does the stride need to be an integral byte count?
</comment>


<refentry ID="ggiDrawPixel">

<refmeta>
<refentrytitle><function/ggiDrawPixel/</refentrytitle>
<manvolnum/3ggi/
<refmiscinfo/GGI/
</refmeta>

<refnamediv>
<refname/ggiDrawPixel/
<refname/ggiPutPixel/
<refname/ggiGetPixel/
<refpurpose>Draw, put, and get a single pixel from a visual</refpurpose>
</refnamediv>

<refsynopsisdiv><funcsynopsis>
<funcsynopsisInfo>#include &lt;ggi/ggi.h&gt;</funcsynopsisInfo>
<funcprototype>
<funcdef>int <function/ggiDrawPixel/</funcdef>
<paramdef>ggi_visual_t <parameter/vis/, 
int <parameter/x/, 
int <parameter/y/
</paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function/ggiPutPixel/</funcdef>
<paramdef>ggi_visual_t <parameter/vis/, 
int <parameter/x/, 
int <parameter/y/, 
ggi_pixel <parameter/col/
</paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function/ggiGetPixel/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/, 
int <parameter/x/, 
int <parameter/y/, 
ggi_pixel *<parameter/col/
</paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>

<para>
Draw, put, or get a single pixelvalue at (<parameter/x/,<parameter/y/).
</para>
</refsect1>

<refsect1>
<title>Return value</title>

<para>All three functions return <returnvalue/0/ to indicate success.
</para>

</refsect1>
</refentry>


<refentry ID="ggiDrawHLine">

<refmeta>
<refentrytitle><function/ggiDrawHLine/</refentrytitle>
<manvolnum/3ggi/
<refmiscinfo/GGI/
</refmeta>

<refnamediv>
<refname/ggiDrawHLine/
<refname/ggiPutHLine/
<refname/ggiGetHLine/
<refpurpose>Draw, put, and get a horizontal line from a visual</refpurpose>
</refnamediv>

<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisInfo>#include &lt;ggi/ggi.h&gt;</funcsynopsisInfo>

<funcprototype>
<funcdef>int <function/ggiDrawHLine/</funcdef>
<paramdef>ggi_visual_t <parameter/vis/, int <parameter/x/, int <parameter/y/, int <parameter/w/</paramdef>
</funcprototype>

<funcprototype>
<funcdef>int <function/ggiPutHLine/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/, int <parameter/x/, int <parameter/y/, int <parameter/w/, void *<parameter/buf/
</paramdef>
</funcprototype>

<funcprototype>
<funcdef>int <function/ggiGetHLine/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/, int <parameter/x/, int <parameter/y/, int <parameter/w/, void *<parameter/buf/
</paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>

<para>
Draw, put, or get a horizontal line from (<parameter/x/,<parameter/y/), extending
<parameter/w/ pixels in the positive x direction (normally right).  The height
is one pixel.
 </para>
</refsect1>

<refsect1>
<title>Return value</title>

<para>All three functions return <returnvalue/0/ to indicate success. 
</para>
</refsect1>

<refsect1>
<title>See Also</title>

<simplelist TYPE=inline>
<member><xref linkEnd="ggiDrawVLine"></member>
<member><xref linkEnd="ggiDrawBox"></member>
<member><xref linkEnd="ggiDrawLine"></member>
</simplelist>

</refsect1>
</refentry>


<refentry ID="ggiDrawVLine">

<refmeta>
<refentrytitle><function/ggiDrawVLine/</refentrytitle>
<manvolnum/3ggi/
<refmiscinfo/GGI/
</refmeta>

<refnamediv>
<refname/ggiDrawVLine/
<refname/ggiPutVLine/
<refname/ggiGetVLine/
<refpurpose>Draw, put, and get a vertical line from a visual</refpurpose>
</refnamediv>

<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisInfo>#include &lt;ggi/ggi.h&gt;</funcsynopsisInfo>

<funcprototype>
<funcdef>int <function/ggiDrawVLine/</funcdef>
<paramdef>ggi_visual_t <parameter/vis/, int <parameter/x/, int <parameter/y/, int <parameter/h/</paramdef>
</funcprototype>

<funcprototype>
<funcdef>int <function/ggiPutVLine/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/, int <parameter/x/, int <parameter/y/, int <parameter/h/, void *<parameter/buf/
</paramdef>
</funcprototype>

<funcprototype>
<funcdef>int <function/ggiGetVLine/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/, int <parameter/x/, int <parameter/y/, int <parameter/h/, void *<parameter/buf/
</paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>

<para>
Draw, put, or get a vertical line from (<parameter/x/,<parameter/y/), extending
<parameter/h/ pixels in the positive y direction (normally down).
The width of the line is one pixel.
 </para>
</refsect1>

<refsect1>
<title>Return value</title>

<para>All three functions return <ReturnValue/0/ to indicate success. 
</para>
</refsect1>

<refsect1>
<title>See Also</title>
<simplelist TYPE=inline>
<member><xref linkEnd="ggiDrawHLine"></member>
<member><xref linkEnd="ggiDrawBox"></member>
<member><xref linkEnd="ggiDrawLine"></member>
</simplelist>
</refsect1>
</refentry>


<refentry ID="ggiDrawBox">

<refmeta>
<refentrytitle><function/ggiDrawBox/</refentrytitle>
<manvolnum/3ggi/
<refmiscinfo/GGI/
</refmeta>

<refnamediv>
<refname/ggiDrawBox/
<refname/ggiPutBox/
<refname/ggiGetBox/
<refpurpose>Draw, put, and get a rectangle from a visual</refpurpose>
</refnamediv>

<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisInfo>#include &lt;ggi/ggi.h&gt;</funcsynopsisInfo>

<funcprototype>
<funcdef>int <function/ggiDrawBox/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/, int <parameter/x/, int <parameter/y/, int <parameter/w/, int <parameter/h/
</paramdef>
</funcprototype>

<funcprototype>
<funcdef>int <function/ggiPutBox/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/, 
int <parameter/x/, int <parameter/y/, int <parameter/w/, int <parameter/h/,
void *<parameter/buf/
</paramdef>
</funcprototype>

<funcprototype>
<funcdef>int <function/ggiGetBox/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/, 
int <parameter/x/, int <parameter/y/, int <parameter/w/, int <parameter/h/, 
void *<parameter/buf/
</paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>

<para>
Draw, put, or get a rectangle at (<parameter/x/,<parameter/y/), extending
<parameter/w/ pixels in the positive x direction and <parameter/h/ pixels in the
positive y direction.
</para>
</refsect1>

<refsect1>
<title>Return value</title>

<para>All three functions return <ReturnValue/0/ to indicate success. 
</para>
</refsect1>

<refsect1>
<title>See Also</title>
<simplelist TYPE=inline>
<member><xref linkEnd="ggiDrawHLine"></member>
<member><xref linkEnd="ggiDrawVLine"></member>
<member><xref linkEnd="ggiDrawLine"></member>
</simplelist>

</refsect1>
</refentry>


<refentry ID="ggiFillscreen">

<refmeta>
<refentrytitle><function/ggiFillscreen/</refentrytitle>
<manvolnum/3ggi/
<refmiscinfo/GGI/
</refmeta>

<refnamediv>
<refname/ggiFillscreen/
<refpurpose>Fills the entire virtual screen</refpurpose>
</refnamediv>

<refsynopsisdiv><funcsynopsis>
<funcsynopsisInfo>#include &lt;ggi/ggi.h&gt;</funcsynopsisInfo>
<funcprototype>
<funcdef>int <function/ggiFillscreen/</funcdef>
<paramdef>ggi_visual_t <parameter/vis/</paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>

<para>
Fills the current clipping rectangle (usually the entire virtual screen)
with the current foreground color.  It may be
more efficient than the corresponding call to <function/ggiDrawBox/.
</para>

</refsect1>

<refsect1>
<title>Return value</title>

<para>This function returns <returnvalue/0/ to indicate success. 
</para>

</refsect1>
</refentry>


<refentry ID="ggiDrawLine">

<refmeta>
<refentrytitle><function/ggiDrawLine/</refentrytitle>
<manvolnum/3ggi/
<refmiscinfo/GGI/
</refmeta>

<refnamediv>
<refname/ggiDrawLine/
<refpurpose>Draw a line on a visual</refpurpose>
</refnamediv>

<refsynopsisdiv><funcsynopsis>
<funcsynopsisInfo>#include &lt;ggi/ggi.h&gt;</funcsynopsisInfo>

<funcprototype>
<funcdef>int <function/ggiDrawLine/</funcdef>
<paramdef>
ggi_visual_t <parameter/vis/, int <parameter/x/, int <parameter/y/, int <parameter/xe/, int <parameter/ye/
</paramdef>
</funcprototype>
</funcsynopsis></refsynopsisdiv>

<refsect1>
<title>Description</title>

<para>
Draws any line, using the current foreground color, from
(<parameter/x/,<parameter/y/) to (<parameter/xe/,<parameter/ye/). The line is exact; the
pixel set is no more than 0.5 pixels off the place it should be.
</para>
</refsect1>

<refsect1>
<title>Return value</title>

<para>This function returns <ReturnValue/0/ to indicate success. 
</para>
</refsect1>

<refsect1>
<title>See Also</title>

<simplelist TYPE=inline>
<member><xref linkEnd="ggiDrawHLine"></member>
<member><xref linkEnd="ggiDrawVLine"></member>
</simplelist>

</refsect1>
</refentry>
</chapter>


