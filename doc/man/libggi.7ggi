.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "LIBGGI" 7ggi "" "" ""
.SH NAME
libggi \- A fast, simple, small and flexible user-space graphics library
.SH "DESCRIPTION"

.PP
LibGGI is a fast, simple, small and flexible user-space graphics library developed by the GGI Project (http://www.ggi-project.org/>. It attempts to abstract the many different graphics output systems existing under Unix (and in the future, other platforms). The support for all of these different types of displays and hardware are provided by dynamically-loaded mini-libraries.

.PP
LibGGI can transparently (to the LibGGI-using application) display graphics on an X window, under SVGAlib, fbcon (Linux framebuffer driver), or the glide library, through their respective graphics drivers, or targets. There are also some other targets which display through another target, such as multi to display simultaneously on multiple displays at once, and tile to tile your display to different monitors.

.PP
LibGGI supports acceleration of graphics primitives where possible.

.PP
LibGGI is a very generic piece of software, that will run on about every platform that has remotely heard of POSIX (ports to other systems such as Win32 are underway) and on many display subsystems.

.SH "ENVIRONMENT VARIABLES"

.PP
The following outlines the environment variables, intended for the user, which affect the behaviour of LibGGI: 

.TP
\fBDISPLAY\fR
If set, LibGGI assumes that you want to use the X target. This setting is overriden by the \fBGGI_DISPLAY\fR variable.

.TP
\fBGGI_DISPLAY\fR
Specifies the default target used when the application calls \fBggiOpen\fR with NULL argument.

The default target is specified using a target-spec: .nf \fBtargetname\fR [:\fItargetargs\fR] .fi where \fItargetname\fR is the name of the target, and \fItargetargs\fR are any target-specific arguments.

If neither this variable nor \fBDISPLAY\fR is set, then the following targets are tried in order until one works: fbdev, svga, aa
Example GGI_DISPLAY settings
	    $ 
	    GGI_DISPLAY=aa ./flying_ggis
	      # see ASCII art flying GGIs
	    $ 
	    GGI_DISPLAY=multi:(Xlib:crono:0.0):(X::0.0)
	    ./demo
	      # see demo on both machine next door and local X at the same time
	  
.TP
\fBGGI_INPUT_target_n\fR, \fBGGI_INPUT_target\fR, \fBGGI_INPUT\fR
\fBGGI_INPUT_target\fR specifies extra LibGII input sources and/or filters for visuals using \fItarget\fR

Multiple inputs can be specified by enclosing each input-spec in parentheses and separating them with semicolons: .nf \fB\fR .fi

The inputs specified by \fBGGI_INPUT_target_n\fR are only opened at the \fIn\fRth call of \fBggiOpen\fR. This is used for misbehaving applications that do not allow the user to specify inputs for the different targets that it opens.

The \fBGGI_INPUT\fR variable specifies input settings for all other targets not specified using the other two variable forms.
Example GGI_INPUT strings
	    $ 
	    exportGGI_INPUT=linux-mouse:auto
	      # all targets
	    $ 
	    export
	    GGI_INPUT_multi=linux-mouse:auto
	      # for multi target only
	  
.TP
\fBGGI_DEFMODE\fR
Specifies the default mode, which is used for mode negotiation with LibGGI applications. Specifically, when GGI_AUTO or GT_AUTO are specified in a mode setting call they will be replaced with values from \fBGGI_DEFMODE\fR before calling the target's own \fBggiSetMode\fR implementation.

The format is: (all on one line) .nf S \fIx\fR x \fIy\fR x \fIdepth\fR V \fIx\fR x \fIy\fR D \fIx\fR x \fIy\fR F \fIframes\fR [ \fIscheme\fR \fIdepth\fR/\fIsize\fR ] .fi Anything and everything can be omitted, except tokens indicating what the next token is.

Any omitted values default to GGI_AUTO (or GT_AUTO for the graphtype). Whitespace and '.' symbols are ignored. Character tokens are case-insensitive. If certain values are not possible, they are overridden by the target.


.RS

.TP
S
Denotes the visible size of the visual. Totally optional, as dimensions without a specifier are considered to be the visible dimensions.

.TP
\fIx\fR, \fIy\fR
The width (\fIx\fR) and height (\fIy\fR), in pixels.

.TP
V
Denotes virtual size, the total drawing area available to the application. The virtual size must be equal or greater than the visible size.

.TP
D
Denotes the number of dots per pixel. For graphics modes, this is always 1x1, and for text modes, this is the size of the character cell.

.TP
F
Denotes number of frames available to the application. Applications can switch between different frames for double-buffering, etc.

.TP
[, ]
Delimits the graphic type.

.TP
\fIscheme\fR
One of: .TP C GT_TRUECOLOR .TP P GT_PALETTE .TP K GT_GREYSCALE .TP T GT_TEXT

.TP
\fIdepth\fR
Pixel depth in number of bits.

.TP
\fIsize\fR
Size of pixel in number of bits, including padding.

.RE
Instead of \fIscheme\fR, \fIdepth\fR, \fIsize\fR, it is also possible to specify the graphtype by using one of the following: GT_1BIT, GT_2BIT, GT_4BIT, GT_8BIT, GT_15BIT, GT_16BIT, GT_24BIT, GT_32BIT, GT_TEXT16, GT_TEXT32
Examples of GGI_DEFMODE strings
.RS

.TP
640x480
just the visible size

.TP
640x480#640x960
same size, but double-height virtual screen

.TP
#1024x768
only virtual size defined

.TP
80x40[T]
(default-fontsized) text mode with 80x40 characters

.TP
#x100[T]
text mode with 100 virtual lines

.TP
640x400[8]
640x400 at 8 bits per pixel

.TP
640x480[GT_8BIT]
same as above, but palettized

.TP
320x200x15, 320x200[C15]
320x200 with 32768 colors (hicolor)

.TP
320x200[C/16]
320x200 with 16-bit pixels (also hicolor)

.TP
320x200[C24/32], 320x200[GT_32BIT]
320x200, with 32-bit pixels for 16777216 colors (truecolor)

.TP
640x480F2[GT_16BIT]
16-bit-color 640x480 with two buffers

.RE

.TP
\fBGGI_DEBUG\fR
The debugging level for LibGGI: .TP 0 or unset debug output is off; debugging is off .TP 255 all debug output is on

You may also bitwise-or any of the following together: .TP 2 debug core .TP 4 debug mode setting .TP 8 debug color handling .TP 16 debug drawing .TP 32 misc debugging output .TP 64 debug dynamic library handling .TP 128 debug event handling

The debugging output can be quite verbose and in most cases you should redirect stderr so that it does not interfere with your program's output.

.TP
\fBGGI_DEBUGSYNC\fR
Turn on synchronous debugging output, flushing the output buffers before returning from \fBGGIDPRINT\fR calls.

.TP
\fBFRAMEBUFFER\fR
Specifies which framebuffer device file the fbdev target should use.

.TP
\fBGGI_NEWVT\fR
If set, causes a new virtual console to be allocated for some Linux-console-based targets (currently fbdev and glide).

.TP
\fBGGI_MANSYNC_FPS\fR
This variable specifies the framerate for targets emulating synchronous mode. The default is 20fps. If you are experiencing problems with the X target over relatively slow remote connections it might be due to connection overload. You might want to try with a lower \fBGGI_MANSYNC_FPS\fR setting.
 

