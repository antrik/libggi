.\\" auto-generated by docbook2man-spec $Revision: 1.4 $
.TH "ggiResourceAcquire" "3ggi" "14 August 2001" "GGI" "LibGGI API"
.SH NAME
ggiResourceAcquire, ggiResourceRelease, ggiResourceMustAcquire \- Acquire and release a LibGGI resource
.SH SYNOPSIS
\fB#include <ggi/ggi.h>
.sp
int ggiResourceAcquire(ggi_resource_t \fIres\fB, uint32 \fIactype\fB);
.sp
int ggiResourceRelease(ggi_resource_t \fIres\fB);
.sp
int ggiResourceMustAcquire(ggi_resource_t \fIres\fB);
\fR.SH "DESCRIPTION"
.PP
\fBggiResourceAcquire\fR acquires (locks) a LibGGI resource, typically a
DirectBuffer (see examples below). The \fIactype\fR indicates the
desired access type for the operation. The following flags may be
bitwise-or'ed together:
.TP
\fBGGI_ACTYPE_READ\fR
read access to the resource
.TP
\fBGGI_ACTYPE_WRITE\fR
write access to the resource
.PP
\fBggiResourceRelease\fR releases (unlocks) an already-acquired
resource.
.PP
\fBggiResourceMustAcquire\fR determines whether or not the
specified resource needs to be acquired before using.
.SH "RETURN VALUE"
.PP
\fBggiResourceAcquire\fR and \fBggiResourceRelease\fR
return 0 on success, <0 on failure.
.PP
\fBggiResourceMustAcquire\fR is simply a macro that returns true
if the resource must be explicitly acquired and released, or false if not.
However, it is still safe to call \fBggiResourceAcquire\fR or
\fBggiResourceRelease\fR even in the latter case -- it would be a no-op.
.SH "EXAMPLES"
.SS "USING DIRECTBUFFERS"
.sp
.nf
const ggi_directbuffer *dbuf;

/* Acquire DirectBuffer before we use it. */
if (ggiResourceAcquire(dbuf->resource, GGI_ACTYPE_WRITE) != 0) {
	fail("Error acquiring DirectBuffer\\n");
}

\fI/* Do framebuffer rendering here... */\fR

/* Release DirectBuffer when done with it. */
ggiResourceRelease(dbuf->resource);
.sp
.fi
