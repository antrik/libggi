.\" This manpage has been automatically generated by docbook2man-spec
.\" from a DocBook document.  docbook2man-spec can be found at:
.\" <http://shell.ipoline.com/~elmert/hacks/docbook2X/> 
.\" Please send any bug reports, improvements, comments, patches, 
.\" etc. to Steve Cheng <steve@ggi-project.org>.
.TH "ggiEventPoll" "3ggi" "11 August 2001" "GGI" "LibGGI API"
.SH NAME
ggiJoinInputs, ggiEventPoll, ggiEventSelect, ggiEventsQueued, ggiEventRead, ggiSetEventMask, ggiGetEventMask, ggiAddEventMask, ggiRemoveEventMask \- Event management for LibGGI visual
.SH SYNOPSIS
\fB#include <ggi/ggi.h>
.sp
gii_input_t ggiJoinInputs(ggi_visual_t \fIvis\fB, 
gii_input_t \fIinp\fB);
.sp
gii_event_mask ggiEventPoll(ggi_visual_t \fIvis\fB, 
gii_event_mask \fImask\fB, 
struct timeval *\fIt\fB);
.sp
int giiEventSelect(ggi_visual_t\fIvis\fB, gii_event_mask *\fImask\fB,
int \fIn\fB,
fd_set *\fIreadfds\fB, fd_set *\fIwritefds\fB, fd_set *\fIexceptfds\fB,
struct timeval *\fItimeout\fB);
.sp
int ggiEventsQueued(ggi_visual_t \fIvis\fB, 
gii_event_mask \fImask\fB);
.sp
int ggiEventRead(ggi_visual_t \fIvis\fB, 
gii_event *\fIev\fB, 
gii_event_mask \fImask\fB);
.sp
int ggiSetEventMask(ggi_visual_t \fIvis\fB, 
gii_event_mask \fIevm\fB);
.sp
gii_event_mask ggiGetEventMask(ggi_visual_t \fIvis\fB);
.sp
int giiAddEventMask(ggi_visual_t \fIvis\fB, 
gii_event_mask \fImask\fB);
.sp
int giiRemoveEventMask(ggi_visual_t \fIvis\fB, 
gii_event_mask \fImask\fB);
\fR.SH "DESCRIPTION"
.PP
LibGGI provides input facilities through an auxiliary library,
\fBLibGII\fR.
Each LibGGI visual internally contains a \fBgii_input_t\fR input, and
all LibGII functions are available to manipulate and process inputs.
The LibGGI versions provided of most LibGII functions simply take a 
\fBggi_visual_t\fR rather than \fBgii_input_t\fR for convenience
during everyday usage. Events are LibGII types. All other semantics 
are the same; see [XRef to LIBGII] for details.
.sp
.RS
.B "Important:"
.PP
By default LibGGI visuals autodetect and open the appropriate inputs, 
including mouse and keyboard and any other inputs that are 'intrinsic' 
to the visual e.g. any registered X11 input device under the X target. 
Thus in the usual cases there is no need to open a LibGII 
\fBgii_input_t\fR directly (and that may in fact fail because an
input device is already open). The LibGGI \fBggiEvent*\fR
functions \fBmust\fR be used to do event handling with LibGGI
visuals, and provide adequate support for most everyday, single-visual
usage.
.PP
Advanced management of input sources is accomplished by detaching
the input from the visual and using LibGII functions on the separate
visual handle (see [XRef to GGIDETACHINPUT]) This is encouraged,
for example, when joining inputs from multiple visuals, because
when two visuals share the same joined input, you cannot
ggiClose both of the visuals (a fatal error will result, because 
closing the first visual closes both of the joined inputs and leaves
the second closed visual with a stale input handle.)
.RE
.sp
.SH "SEE ALSO"
\fBgiiSetEventMask\fR(3), \fBgiiEventPoll\fR(3), [XRef to GGIDETACHINPUT]
