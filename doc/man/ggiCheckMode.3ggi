.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "GGICHECKMODE" 3ggi "" "" ""
.SH NAME
ggiCheckMode, ggiCheckTextMode, ggiCheckGraphMode, ggiCheckSimpleMode \- Check or negotiate a text/graphics mode on a visual
.SH "SYNOPSIS"
.ad l
.hy 0

#include <ggi/ggi.h>
.sp
.HP 18
int\ \fBggiCheckMode\fR\ (ggi_visual_t\ \fIvis\fR, ggi_mode\ *\fItm\fR);
.HP 22
int\ \fBggiCheckTextMode\fR\ (ggi_visual_t\ \fIvisual\fR, int\ \fIcols\fR, int\ \fIrows\fR, int\ \fIvcols\fR, int\ \fIvrows\fR, int\ \fIfontx\fR, int\ \fIfonty\fR, ggi_mode\ *\fIsuggested_mode\fR);
.HP 23
int\ \fBggiCheckGraphMode\fR\ (ggi_visual_t\ \fIvisual\fR, int\ \fIx\fR, int\ \fIy\fR, int\ \fIxv\fR, int\ \fIyv\fR, ggi_graphtype\ \fItype\fR, ggi_mode\ *\fIsuggested_mode\fR);
.HP 24
int\ \fBggiCheckSimpleMode\fR\ (ggi_visual_t\ \fIvisual\fR, int\ \fIx\fR, int\ \fIy\fR, int\ \fIframes\fR, ggi_graphtype\ \fItype\fR, ggi_mode\ *\fIsuggested_mode\fR);
.ad
.hy

.SH "DESCRIPTION"

.PP
 \fBggiCheckMode\fR checks whether or not the given mode will work on the visual. If it does not work, it will modify the values of passed ggi_mode structure so that the mode works. This mode negotiation allows the application to discover modes that are both supported by the visual and suitable to the application.

.PP
 \fBggiCheckTextMode\fR checks whether the text mode with the given visible and virtual dimensions and the font size is supported.

.PP
 \fBggiCheckGraphMode\fR checks whether the graphics mode with the given visible and virtual dimensions and type is supported.

.PP
 \fBggiCheckSimpleMode\fR checks whether the graphics mode with the given visible dimensions, type, and number of buffers is supported. This is used in lieu of \fBggiCheckGraphMode\fR if multiple buffering is desired.

.PP
For \fBggiCheckTextMode\fR, \fBggiCheckGraphMode\fR and \fBggiCheckSimpleMode\fR, \fIsuggested_mode\fR is either NULL or a pointer to a ggi_mode which will be filled in with the negotiated mode parameters.

.SH "RETURN VALUE"

.PP
For \fBggiCheckTextMode\fR and \fBggiCheckGraphMode\fR, a return of 0 means that the corresponding set mode call for this mode would succeed. Otherwise, the mode given cannot be set. In this case, \fIsuggested_mode\fR is changed to the suggested mode.

.PP
If the only modifications made to the structure is replacing GGI_AUTO or GT_AUTO value, the functions return success.

.SH "RULES FOR MODE NEGOTIATION"

.PP
First, if GGI_AUTO (or GT_AUTO for the graphtype) is specified for any of the members of \fI*tm\fR, these are filled in with the recommended values. The values could be to a maximum, preferred, or \fBGGI_DEFMODE\fR resolution, and will be compatible with any other constraints.

.PP
An application that does not care about a specific paramater should always specify GGI_AUTO or GT_AUTO for it.

.PP
The resulting mode is guaranteed to be valid; if not, the application can assume that it cannot set any mode on the given visual and give up.

.PP
The suggested mode is derived as follows: 

.TP 3
\(bu
Resolutions are always adjusted up. If you want the next lower, start out at 1x1 (or somewhere else reasonable) and jump up the ladder.

Only if the maximum resolution would be exceeded, resolutions are adjusted down to the maximum.

The above applies to visible and virtual size. If there is interference between them, the visible size is satified first if possible, then the virtual size.

The adjustment of one value do not normally affect other values. For example, if (visible) 320x100 (virtual 320x200) is requested, the visible size may be adjusted to 320x200, but virtual size will be left alone. Of course, if the virtual size becomes less than visible size, then it will be adjusted as well.
.TP
\(bu
Font sizes are handled the other way round: they are adjusted down except when there is nothing below.
.TP
\(bu
A specific graphtype is changed only if the card does not support it at all. If the maximum resolution is exceeded, then that is adjusted down and not the graphtype. This assumes, that if you request true-color, you really want that and not so badly the resolution you requested. If this is not the case, you can still retry with another graphtype or GT_AUTO.

If graphtype is changed, it is adjusted in ascending order if possible: e.g. i.e. 1->4->8->15->16->24/32 bit. So you always get a mode which can do more than you requested. Only when no better modes are available, the type is adjusted down.
.LP
 

.SH "EXAMPLES"
Example 10. Try a 320x200x8 mode
.nf

err = ggiCheckGraphMode(vis, 320, 200, GGI_AUTO, GGI_AUTO, GT_8BIT, 
                        &sug_mode, NULL);
if(err) {
        \fI/* Check if returned mode is ok... */\fR
}
else {
        ggiSetMode(&sug_mode);
}

.fi

.SH "SEE ALSO"
, , 
