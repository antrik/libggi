.\" This manpage has been automatically generated by docbook2man-spec
.\" from a DocBook document.  docbook2man-spec can be found at:
.\" <http://shell.ipoline.com/~elmert/hacks/docbook2X/> 
.\" Please send any bug reports, improvements, comments, patches, 
.\" etc. to Steve Cheng <steve@ggi-project.org>.
.TH "ggiOpen" "3ggi" "12 August 1999" "GGI" "LibGGI API Manual"
.SH NAME
ggiOpen, ggiClose \- Open and close a visual
.SH SYNOPSIS
\fB#include <ggi/ggi.h>
.sp
ggi_visual_t ggiOpen(const char *\fIdisplay\fB, \fI...\fB);
.sp
int ggiClose(ggi_visual_t \fIvis\fB);
\fR.SH "DESCRIPTION"
.PP
\fBggiOpen\fR opens a visual (along with associated inputs).
The visual is specified as a display string, followed by \fBNULL\fR.
If only \fBNULL\fR is specified, the default display target is
opened. (This may be specified by the user.)
.PP
The other arguments are for internal purposes only, such as
\fIargptr\fR, used to pass driver-specific, non-textual information to
the driver.
.PP
\fBggiClose\fR releases and destroys an open visual and its associated
internal control structures. This will close X windows, return consoles to
text-mode, etc.
.SH "RETURN VALUE"
.PP
\fBggiOpen\fR returns the opened visual (\fBggi_visual_t\fR), or
NULL for error.
.PP
\fBggiClose\fR returns 0 for OK, otherwise an error
code.
.SH "EXAMPLES"
.SS "OPEN DEFAULT VISUAL"
.sp
.nf
ggi_visual_t vis = ggiOpen(NULL);

if(vis==NULL)
{
	ggiPanic("Couldn't open default visual!\\n");
}
.sp
.fi
.SS "OPEN A MEMORY VISUAL"
.sp
.nf
ggi_visual_t memvis = ggiOpen("display-memory", NULL);

if(memvis==NULL) {
	return -1;
}
.sp
.fi
.SS "CLOSING VISUALS"
.sp
.nf
ggiClose(memvis);
ggiClose(vis);
.sp
.fi
.SH "SEE ALSO"
\fBggiInit\fR(3), \fBlibggi\fR(7)
