.TH "ggiOpen" 3 "2007-06-24" "libggi-current" GGI
.SH NAME
\fBggiOpen\fR, \fBggiClose\fR : Open and close a visual
.SH SYNOPSIS
.nb
.nf
#include <ggi/ggi.h>

int ggiOpen(ggi_visual_t vis, const char *display, ...);

int ggiClose(ggi_visual_t vis);
.fi

.SH DESCRIPTION
\fBggiOpen\fR opens a visual.  \fIvis\fR is a stem created by \f(CWggNewStem(3)\fR.
The visual is specified as a display string, followed by \fBNULL\fR. 
If only \fBNULL\fR is specified, the default display target is opened,
which means first examining \fBGGI_DISPLAY\fR, then invoking
\f(CWdisplay-auto(7)\fR.  The other arguments are for internal purposes only,
such as \fIargptr\fR, used to pass driver-specific, non-textual information to
the driver.

\fBggiClose\fR releases and destroys an open visual.  This will close X
windows, return consoles to text-mode, etc.
.SH RETURN VALUE
\fBggiOpen\fR returns \fB0\fR for OK, otherwise a \f(CWgg-error(3)\fR code.

\fBggiClose\fR returns \fB0\fR for OK, otherwise a \f(CWgg-error(3)\fR code.
.SH EXAMPLES
Open and closing default visual:

.nb
.nf
int          err;
ggi_visual_t vis;

err = ggiOpen(vis, NULL);

if(err != GGI_OK) {
      ggPanic("Couldn't open default visual!\en");
}

/* do stuff */

err = ggiClose(vis);

if(err != GGI_OK) {
      ggPanic("Couldn't close default visual!\en");
}

.fi

Open and closing a memory visual:

.nb
.nf
int          err;
ggi_visual_t memvis;

err = ggiOpen(memvis, "display-memory", NULL);

if(err != GGI_OK) {
      return -1;
}

/* do stuff */

err = ggiClose(memvis);

if(err != GGI_OK) {
      return -1;
}
.fi

.SH SEE ALSO
\f(CWdisplay-auto(7)\fR, \f(CWggiInit(3)\fR, \f(CWlibggi(7)\fR
