------------------------------------------
Status symbols
------------------------------------------
- still to do
+ still to do and to merge into the stable tree
* completed

------------------------------------------
Next major release
------------------------------------------
Version : 2.2.0
Due : ????-??-??

[Building issues]

+ Verify and fix cross-compilation to other architectures

* update build system to libtool 2.0, make use of latest
  autotools features (Christoph Egger)

- add support for non-gcc compilers

[Common issues]

- libKGI-target (compiling framework)
+ improve modelist.inc -- reduce amount of per-target code necessary to use 
  a modelist by providing sensible constructor/destructor which fills out 
  default values automatically.  Perhaps move to helper lib.
- add helper target for dirty-region management -- keep refreshes from 
  backbuffer to a (practical) minimum as updating untouched data wastes
  bus bandwidth.
* look at  egrep -Hirn "return[[:space:]]*\-\w+;"  and peruse proper defines for
  retval where applicable (Christoph Egger)
- make use of libgii's enhanced dl system:
  allow single library to serve multiple suggest strings
  (see http://marc.theaimsgroup.com/?l=ggi-develop&m=105063854017420&w=2)
- make use of libgii's enhanced config file system:
  aliases, in-file option strings, wildcards (also see above URL)


[Target specific issues]

- update targets after the common issues are done (apply new 
  dirty region stuff, new modelist stuff, etc.)
+ alter fbdev.conf appropriately for selected accel sublibs --
  perhaps provide a utility for distributions to use when a sublib
  is installed/uninstalled to update fbdev.conf accordingly, but mainly
  just get it right during the build process.
- make pseudo-targets use dirty-region management.  This 
  is an open design issue -- if done right, pseudo targets and
  targets that make use of a RAM backbuffer or slave memvis could 
  merge their backbuffers and dirty-region support, decreasing 
  runtime profile.

New X Target:

- make use of the dirty-region helper target
- Make display-xf86dga work with all pre-4.x XF86, move newer DGA support
  to a new dga helper.
+ 1,2,4-bpp support for new display-X.
+ Test/complete display-X with obscure bitdepths/endian reversal.
+ Verify/correct interaction of mouse events with setorigin.
- Re-implement old display-X emulated setorigin for root windows and
  for buggy WMs with faulty colormap handling code.  The old display-X
  used to do setorigin (and splitline) through the backbuffer, by 
  altering the translation between the backbuffer and the screen.
  This involved a pretty ugly system of coordinate and clip translation,
  but unfortunately is needed for root-window displays.  For efficiency
  reasons, we should keep the two-window system and only use the 
  old-style support when needed.  The part about colormap ties into the
  next item -- using the old-style support would allow a normal window
  to work without a parent window, which can workaround the colormap 
  problem on buggy window-managers.  Anyone who does this should note
  that LibGGIMISC needs to have splitline support implemented, and it
  would help if the GGI core code made this easy so that LibGGIMISC does
  not have to provide a complete set of overloading primitives.
- See if colormap can be force-installed under some buggy WMs.
  Some Windowmanagers do not seem to realize that when a window is 
  moused over, they need to install the colormap of that window.
  Some will only install the colormap of windows that are one level 
  under the windowmanager.  This can easily be checked for
  in 8bpp mode, or if you have a card that supports gammamap, in 
  a 16-bpp or 32-bpp mode with gamma.  Run the demo application, and
  see if the pallette or gamma tests work.  If not, try mousing out/in
  of the window and see if the test starts working when you mouse back
  in.  If either do not work, then things need to be fixed, but 
  especially the second part.
- colormap: add RW support.
- Turn off hidden virtual area flushing when no backing store is 
  available.  When backing store is not turned on on the X server,
  then flushing data to the unexposed areas of the visual just wastes
  computing resources.  When it is turned on, the server will sometimes
  save the data which can make setorigin/copybox faster, but when it is not
  on, the server theoretically just dumps the data in the bit-bucket.
  (In actuality some driver authors cheat and do a bit of backing store
  unconditionally, I think, but the overall performance will probably be 
  best if we dont't flush to unbacked regions).
- Get upstream to fix stuff (Solid-fill ops into backing store, broken
  WM child window colormaps, etc.)  This is basically a matter of pestering
  people until you find someone in a position to fix it and helping or
  encouraging them to do so.
- Compile on crusty old libc5 machines; replace any new-style X* symbols
  with backwards-compatible old-style symbols.
- dbe helper for new display-X -- The dbe docs are here:
  http://ftp.x.org/pub/DOCS/DBE/
  and they will tell you that dbe allows you to create double-buffer
  areas for windows.  This would be used to implement frames, instead
  of "para-virtual area" like we do now, as an enhancement to giving
  each frame its own window. Set the frame being displayed to the
  frontbuffer, the write frame to the backbuffer.
  If display frame == write frame, render onto dbe's expose buffer.
- dga helper for new display-X: allow -inwin=root visuals to use dga,
  and overload the normal operations with dga acceleration.  This can
  only be done after vidmode support.
- vidmode helper for new display-X: set the X server resolution, either
  for -inwin=root, or cleverly positioning a non-root window so the 
  borders are of the side of the screen.
- Investigate emulating lower fixed-palette bitdepths and find out how to
  get those neat 8-bpp-pseudocolor-window-on-24bpp-server visuals to work.
  Basically since X provides various "visuals" some of which are lower
  resolutions than the normal screen, we may be able to use the X server
  to support different bitdepths, and in some cases even paletted modes, 
  without using pseudo targets like palemu and trueemu.  This actually would 
  not be all that hard -- it is just a matter of choosing the right X11 
  "visual" for the parent and child windows, and matching the slave visual 
  to that.  And since the X server does the work, it would likely be 
  a lot faster than palemu/trueemu.
- Prevent ungraceful termination of a paletted/gammamapped -inroot app
  from leaving the X server in a bad state by adding a signal handler.
  Current workaround: if no apps will run after a GGI -inroot app was 
  terminated, run another GGI app -inroot and terminate it normally (use 
  GGI_INPUT=stdin to talk to an interactive app through an xterm).


[Documentation related stuff]

+ write a target developers guide




------------------------------------------
Over-Next major release
------------------------------------------
Version : 3.0.0
Due : ????-??-??

[Building issues]

[Common issues]

- change way that pixela/pixel stubs are selected, integrate ggiFlush
  and ggiSetFlags with the changed() dl cascade, add renderers (in addition
  to extensions) to the cascade, add some infrastructure for next 
  cut of LibGGIMISC to make it easy for extensions to integrate with automatic
  frame flipping.  Make sure it's all fast and efficient.
- move libmmutil from libgalloc to libggi to allow normal ggi primitives
  to use batchops
- finish long-term plan
- implement below API additions
- implement below non-backward-compatible changes

[Target specific issues]

- A working full-featured KGI-target


[Documentation related stuff]


------------------------------------------
Long-term plan
------------------------------------------

- improve fbdev mode negotiation.  Option to obey /etc/fb.modes or not.
- move display autodetection routines into a display-auto sublib, and
  create display-auto-linux, display-auto-bsd, etc, mapping them to
  display-auto in libggi.conf.

------------------------------------------
Things that will induce API additions
------------------------------------------

- make sure all bitfields (e.g. BM_TYPE) have associated _MASK/_SHIFT macros
- Figure out all the caveats for cloning a visual and add core support 
	and a ggiClone API function.
- Add a ggiFlushNeeded that checks to see if a ggiFlush should be called,
  but allows application to continue on its merry way if so.
- Add ggi{Get|Set}TargetOptions() allowing the user to not only set
  target options at ggiOpen() time.
- Add ggiGetListOfTargetExtension(char **ext);
- Add ggiQueryTargetExtension(const char *ext, char *versionstr)


------------------------------------------
Non backward-compatible changes
------------------------------------------

- Remove old ggi versions of event types, which were replaced by gii typedefs.
- Restructure ggi/errors.h codes to allow wrappers/apps to easily 
  differentiate between application errors and internal faults.
